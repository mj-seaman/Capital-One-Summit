{"version":3,"sources":["components/value.js","components/year.js","components/month.js","components/day.js","components/category.js","components/AutoCompleteText.js","components/Searches.js","components/API.js","components/RandomData.js","components/Random.js","components/Data.js","components/SearchButton.js","App.js","serviceWorker.js","index.js"],"names":["split","AutoCompleteText","props","onTextChanged","e","items","value","target","suggestions","length","regex","RegExp","sort","filter","v","test","setState","text","state","trivia","this","map","item","onClick","suggestionSelected","className","onChange","type","renderSuggestions","Component","SearchCategory","category","year","month","day","API","class","clas","title","question","answer","airdate","RandomData","fetch","then","res","json","data","catch","console","log","Random","displayRandom","key","id","Data","SearchButton","display","App","Searches","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8c3b0bda.chunk.js","sourcesContent":["export default `100\n200\n300\n400\n500\n600\n700\n800\n900\n1000`.split('\\n')\n","export default `1964\n1965\n1966\n1967\n1968\n1969\n1970\n1971\n1972\n1973\n1974\n1975\n1976\n1977\n1978\n1979\n1980\n1981\n1982\n1983\n1984\n1985\n1986\n1987\n1988\n1989\n1990\n1991\n1992\n1993\n1994\n1995\n1996\n1997\n1998\n1999\n2000\n2001\n2002\n2003\n2004\n2005 \n2006\n2007\n2008\n2009\n2010\n2011\n2012\n2013\n2014\n2015\n2016\n2017\n2018\n2019`.split('\\n')","export default `1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12`.split('\\n')","export default `1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31`.split('\\n')","export default `baseball\nodd jobs\naustralia\n\\\"cat\\\"egory\npolitics\nmovies\nu.s. cities\ntime\ndining out\nchildren's literature\ntrivia\n\\\"ac\\\"/\\\"dc\\\"\nancient worlds\ncars\nhollywood legends\n\\\"hard\\\"\nlandmarks\ncomedians\nawards\nmovie trivia\nnumber please\nanimals\ninventions`.split('\\n')\n","import React, {Component} from 'react'\nimport '/Users/jeanineseaman/my-app/src/styles/AutoCompleteText.css'\n\nexport default class AutoCompleteText extends Component {\n    constructor(props) {\n        super(props)\n        this.state = { \n            suggestions: [],\n            trivia: [],\n            text: '',\n        }\n    }\n\n    onTextChanged = (e) => {\n        const {items} = this.props\n        const value = e.target.value\n        let suggestions = [];\n        if (value.length > 0) {\n            const regex = new RegExp(`^${value}`, 'i')\n            suggestions = items.sort().filter(v => regex.test(v))\n        }\n        this.setState(() => ({ suggestions, text: value }))\n    }\n\n    suggestionSelected (value) {\n        this.setState(() => ({\n            text: value,\n            suggestions: []\n        }))\n    }\n    renderSuggestions () {\n        const { suggestions } = this.state;\n        if (suggestions.length === 0) {\n            return null\n        }\n        return (\n            <ul>\n                {suggestions.map((item) => <li onClick={() => this.suggestionSelected(item)} >{item}</li>)}\n            </ul>\n        )\n    }\n\n    render() {\n        const { text } = this.state\n        return (\n            <div className=\"AutoCompleteText\">\n                <input value={text} onChange={this.onTextChanged} type=\"text\" />\n                {this.renderSuggestions()}\n\n            </div>\n        )\n    }\n}","import React, {Component} from 'react'\nimport value from './value'\nimport year from './year'\nimport month from './month'\nimport day from './day'\nimport category from './category'\nimport AutoCompleteText from './AutoCompleteText'\n\nclass SearchCategory extends Component {\n  render () {\n    return (\n      <div>\n        <p> Enter Category:</p>\n        <AutoCompleteText items={ category } /> \n        <p> Enter Difficulty:</p>\n        <AutoCompleteText items={ value }/>\n        <p> Enter Year:</p>\n        <AutoCompleteText items={ year }/>\n        <p> Enter Month:</p>\n        <AutoCompleteText items={ month }/>\n        <p> Enter Day:</p>\n        <AutoCompleteText items={ day }/>\n      </div>\n    )\n  }\n}\n\nexport default SearchCategory","import React from 'react'\n\nconst API = ({ trivia }) => {\n  return (\n    <div>\n      {trivia.map((trivia) => (\n        <div class=\"trivia\">\n          <div class=\"trivia-body\">\n            <h4>Difficulty: </h4>\n            <p class=\"trivia-value\">{trivia.value}</p>\n            <div clas=\"trivia-category\">\n            <h4>Category: </h4>\n                <p class=\"trivia-category-title\">{trivia.category.title}</p>\n            </div>\n            <h4>Trivia: </h4>\n            <p class=\"trivia-question\">{trivia.question}</p>\n            <h4>Answer: </h4>\n            <p class=\"trivia-answer\">{trivia.answer}</p>\n            <h4>Airdate:</h4>\n            <p class=\"trivia-airdate\">{trivia.airdate}</p>\n          </div>\n        </div>\n      ))}\n    </div>\n  )\n};\n\nexport default API\n","import React, {Component} from 'react'\nimport API from './API'\n\nclass RandomData extends Component {\n  state = {\n    trivia: []\n  }\n  componentDidMount() {\n    fetch('http://jservice.io/api/random')\n      .then(res => res.json())\n      .then((data) => {\n        this.setState({ trivia: data })\n      })\n      .catch(console.log)\n  }\n  render () {\n    return( \n      <API trivia={this.state.trivia} /> \n    )\n  }\n}\n\nexport default RandomData","import React, {Component} from 'react'\nimport RandomData from './RandomData'\nimport '/Users/jeanineseaman/my-app/src/styles/Button.css'\n\nclass Random extends Component {\n    constructor(props) {\n        super(props)\n        this.state = { \n            trivia: [],\n            displayRandom: false\n        }\n    }\n    \n    displayRandom = () => {\n        this.setState({\n            displayRandom: !this.state.displayRandom\n        })\n    }\n    render () {\n        let trivia = this.state.trivia\n        if ( this.state.displayRandom ) {\n            trivia = (\n                <div>\n                    <RandomData key={trivia.id}\n                    title={trivia.id} />\n                </div>\n            )\n        }\n        return (\n            <div className = 'Button'>\n                <button onClick={this.displayRandom}>Get Random Trivia</button> {trivia}\n            </div>\n        )\n    }\n}\n\nexport default Random","import React, {Component} from 'react'\nimport API from './API'\n\nclass Data extends Component {\n  state = {\n    trivia: []\n  }\n  componentDidMount() {\n    fetch('http://jservice.io/api/clues')\n      .then(res => res.json())\n      .then((data) => {\n        this.setState({ trivia: data })\n      })\n      .catch(console.log)\n  }\n  render () {\n    return( \n      <API trivia={this.state.trivia} /> \n    )\n  }\n}\n\nexport default Data","import React, {Component} from 'react'\nimport Data from './Data'\nimport '/Users/jeanineseaman/my-app/src/styles/Button.css'\n\n\nclass SearchButton extends Component {\n    constructor(props) {\n        super(props)\n        this.state = { \n            trivia: [],\n            display: false\n        }\n    }\n    \n    display = () => {\n        this.setState({\n            display: !this.state.display\n        })\n    }\n\n    render () {\n        let trivia = this.state.trivia\n        if ( this.state.display ) {\n            trivia = (\n                <div>\n                    <Data key={trivia.id}\n                    title={trivia.id} />\n                </div>\n            )\n        }\n        return (\n            <div className = 'Button'>\n                <button onClick={this.display}>Show all Trivia</button> {trivia}\n            </div>\n        )\n    }\n}\nexport default SearchButton\n\n","import React, {Component} from 'react'\nimport Searches from './components/Searches'\nimport Random from './components/Random'\nimport SearchButton from './components/SearchButton'\nimport './App.css'\n\nclass App extends Component {\n  render() {\n  return (\n    <div className= 'App'>\n      <center><h1>Jeopardy! Trivia Search</h1></center>\n      <center><h2>Select Search Criteria</h2></center>\n      <Searches/>\n      <SearchButton/>\n      <Random/>\n    </div>\n  )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}